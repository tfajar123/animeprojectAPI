// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnime = `-- name: CreateAnime :one
INSERT INTO anime (title, description, image, type) VALUES ($1, $2, $3, $4) RETURNING id, title, description, image, type, created_at, updated_at
`

type CreateAnimeParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Image       pgtype.Text `json:"image"`
	Type        pgtype.Text `json:"type"`
}

func (q *Queries) CreateAnime(ctx context.Context, arg CreateAnimeParams) (Anime, error) {
	row := q.db.QueryRow(ctx, createAnime,
		arg.Title,
		arg.Description,
		arg.Image,
		arg.Type,
	)
	var i Anime
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAnimeGenre = `-- name: CreateAnimeGenre :one
INSERT INTO anime_genre (anime_id, genre_id) VALUES ($1, $2) RETURNING id, anime_id, genre_id, created_at, updated_at
`

type CreateAnimeGenreParams struct {
	AnimeID int32 `json:"anime_id"`
	GenreID int32 `json:"genre_id"`
}

func (q *Queries) CreateAnimeGenre(ctx context.Context, arg CreateAnimeGenreParams) (AnimeGenre, error) {
	row := q.db.QueryRow(ctx, createAnimeGenre, arg.AnimeID, arg.GenreID)
	var i AnimeGenre
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.GenreID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createEpisode = `-- name: CreateEpisode :one
INSERT INTO episode (episode_number, episode_url, anime_id) VALUES ($1, $2, $3) RETURNING id, episode_number, episode_url, anime_id, created_at, updated_at
`

type CreateEpisodeParams struct {
	EpisodeNumber int32  `json:"episode_number"`
	EpisodeUrl    string `json:"episode_url"`
	AnimeID       int32  `json:"anime_id"`
}

func (q *Queries) CreateEpisode(ctx context.Context, arg CreateEpisodeParams) (Episode, error) {
	row := q.db.QueryRow(ctx, createEpisode, arg.EpisodeNumber, arg.EpisodeUrl, arg.AnimeID)
	var i Episode
	err := row.Scan(
		&i.ID,
		&i.EpisodeNumber,
		&i.EpisodeUrl,
		&i.AnimeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createGenre = `-- name: CreateGenre :one
INSERT INTO genre (name) VALUES ($1) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateGenre(ctx context.Context, name string) (Genre, error) {
	row := q.db.QueryRow(ctx, createGenre, name)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAnime = `-- name: DeleteAnime :exec
DELETE FROM anime WHERE id = $1
`

func (q *Queries) DeleteAnime(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAnime, id)
	return err
}

const deleteAnimeGenre = `-- name: DeleteAnimeGenre :exec
DELETE FROM anime_genre WHERE anime_id = $1 AND genre_id = $2
`

type DeleteAnimeGenreParams struct {
	AnimeID int32 `json:"anime_id"`
	GenreID int32 `json:"genre_id"`
}

func (q *Queries) DeleteAnimeGenre(ctx context.Context, arg DeleteAnimeGenreParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeGenre, arg.AnimeID, arg.GenreID)
	return err
}

const deleteEpisode = `-- name: DeleteEpisode :exec
DELETE FROM episode WHERE id = $1
`

func (q *Queries) DeleteEpisode(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEpisode, id)
	return err
}

const deleteGenre = `-- name: DeleteGenre :exec
DELETE FROM genre WHERE id = $1
`

func (q *Queries) DeleteGenre(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGenre, id)
	return err
}

const getAnime = `-- name: GetAnime :one
SELECT id, title, description, image, type, created_at, updated_at FROM anime WHERE id = $1
`

func (q *Queries) GetAnime(ctx context.Context, id int32) (Anime, error) {
	row := q.db.QueryRow(ctx, getAnime, id)
	var i Anime
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnimes = `-- name: GetAnimes :many
SELECT id, title, description, image, type, created_at, updated_at FROM anime ORDER BY id DESC
`

func (q *Queries) GetAnimes(ctx context.Context) ([]Anime, error) {
	rows, err := q.db.Query(ctx, getAnimes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Anime
	for rows.Next() {
		var i Anime
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Image,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAnimesByGenreId = `-- name: GetAnimesByGenreId :many
SELECT id, title, description, image, type, created_at, updated_at FROM anime WHERE id IN (SELECT anime_id FROM anime_genre WHERE genre_id = $1)
`

func (q *Queries) GetAnimesByGenreId(ctx context.Context, genreID int32) ([]Anime, error) {
	rows, err := q.db.Query(ctx, getAnimesByGenreId, genreID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Anime
	for rows.Next() {
		var i Anime
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Image,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisode = `-- name: GetEpisode :one
SELECT id, episode_number, episode_url, anime_id, created_at, updated_at FROM episode WHERE id = $1
`

func (q *Queries) GetEpisode(ctx context.Context, id int32) (Episode, error) {
	row := q.db.QueryRow(ctx, getEpisode, id)
	var i Episode
	err := row.Scan(
		&i.ID,
		&i.EpisodeNumber,
		&i.EpisodeUrl,
		&i.AnimeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEpisodesByAnimeId = `-- name: GetEpisodesByAnimeId :many
SELECT id, episode_number, episode_url, anime_id, created_at, updated_at FROM episode WHERE anime_id = $1
`

func (q *Queries) GetEpisodesByAnimeId(ctx context.Context, animeID int32) ([]Episode, error) {
	rows, err := q.db.Query(ctx, getEpisodesByAnimeId, animeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Episode
	for rows.Next() {
		var i Episode
		if err := rows.Scan(
			&i.ID,
			&i.EpisodeNumber,
			&i.EpisodeUrl,
			&i.AnimeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGenre = `-- name: GetGenre :one
SELECT id, name, created_at, updated_at FROM genre WHERE id = $1
`

func (q *Queries) GetGenre(ctx context.Context, id int32) (Genre, error) {
	row := q.db.QueryRow(ctx, getGenre, id)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGenres = `-- name: GetGenres :many
SELECT id, name, created_at, updated_at FROM genre
`

func (q *Queries) GetGenres(ctx context.Context) ([]Genre, error) {
	rows, err := q.db.Query(ctx, getGenres)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Genre
	for rows.Next() {
		var i Genre
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGenresByAnimeId = `-- name: GetGenresByAnimeId :many
SELECT id, name, created_at, updated_at FROM genre WHERE id IN (SELECT genre_id FROM anime_genre WHERE anime_id = $1)
`

func (q *Queries) GetGenresByAnimeId(ctx context.Context, animeID int32) ([]Genre, error) {
	rows, err := q.db.Query(ctx, getGenresByAnimeId, animeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Genre
	for rows.Next() {
		var i Genre
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnime = `-- name: UpdateAnime :one
UPDATE anime SET title = $2, description = $3, image = $4, type = $5 WHERE id = $1 RETURNING id, title, description, image, type, created_at, updated_at
`

type UpdateAnimeParams struct {
	ID          int32       `json:"id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Image       pgtype.Text `json:"image"`
	Type        pgtype.Text `json:"type"`
}

func (q *Queries) UpdateAnime(ctx context.Context, arg UpdateAnimeParams) (Anime, error) {
	row := q.db.QueryRow(ctx, updateAnime,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Image,
		arg.Type,
	)
	var i Anime
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEpisode = `-- name: UpdateEpisode :one
UPDATE episode SET episode_number = $2, episode_url = $3 WHERE id = $1 RETURNING id, episode_number, episode_url, anime_id, created_at, updated_at
`

type UpdateEpisodeParams struct {
	ID            int32  `json:"id"`
	EpisodeNumber int32  `json:"episode_number"`
	EpisodeUrl    string `json:"episode_url"`
}

func (q *Queries) UpdateEpisode(ctx context.Context, arg UpdateEpisodeParams) (Episode, error) {
	row := q.db.QueryRow(ctx, updateEpisode, arg.ID, arg.EpisodeNumber, arg.EpisodeUrl)
	var i Episode
	err := row.Scan(
		&i.ID,
		&i.EpisodeNumber,
		&i.EpisodeUrl,
		&i.AnimeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGenre = `-- name: UpdateGenre :one
UPDATE genre SET name = $2 WHERE id = $1 RETURNING id, name, created_at, updated_at
`

type UpdateGenreParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateGenre(ctx context.Context, arg UpdateGenreParams) (Genre, error) {
	row := q.db.QueryRow(ctx, updateGenre, arg.ID, arg.Name)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
